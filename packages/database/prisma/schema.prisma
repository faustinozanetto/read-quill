datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  readTargets  ReadTargets?
  books        Book[]
  achievements UserAchievement[]

  threads        Thread[]
  threadComments ThreadComment[]
}

model ReadTargets {
  id String @id @default(cuid())

  daily   Int @default(0)
  weekly  Int @default(0)
  monthly Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Book {
  id          String    @id @default(cuid())
  name        String
  author      String
  coverImage  String
  language    String
  pageCount   Int
  startedAt   DateTime?
  finishedAt  DateTime?
  isFavourite Boolean   @default(false)
  review      String?
  rating      Int?

  reader   User   @relation(fields: [readerId], references: [id], onDelete: Cascade)
  readerId String

  annotations    Annotation[]
  readRegistries ReadRegistry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Annotation {
  id      String @id @default(cuid())
  title   String
  chapter String
  content String

  book   Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReadRegistry {
  id        String @id @default(cuid())
  pagesRead Int

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime?

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
}

model Achievement {
  id         String            @id @default(cuid())
  name       String
  criteria   Json // JSON field to store badge criteria
  unlockedBy UserAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id       String @id @default(cuid())
  title    String
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments ThreadComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreadComment {
  id      String @id @default(cuid())
  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  thread   Thread @relation(fields: [threadId], references: [id])
  threadId String

  createdAt DateTime @default(now())
}
