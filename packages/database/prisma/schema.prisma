datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  profileCompleted Boolean   @default(false)

  readTargets  ReadTargets?
  books        Book[]
  achievements UserAchievement[]

  threads              Thread[]
  threadComments       ThreadComment[]
  userFavouriteThreads UserFavouriteThread[]
  reviewLikes          ReviewLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ReadTargets {
  id String @id @default(cuid())

  daily   Int @default(0)
  weekly  Int @default(0)
  monthly Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Book {
  id          String    @id @default(cuid())
  name        String
  author      String
  language    String
  pageCount   Int
  startedAt   DateTime?
  finishedAt  DateTime?
  isFavourite Boolean   @default(false)
  review      Review?

  rating Int?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: NoAction)
  imageId String

  reader   User   @relation(fields: [readerId], references: [id], onDelete: Cascade)
  readerId String

  annotations    Annotation[]
  readRegistries ReadRegistry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String @id @default(cuid())
  content String

  book   Book         @relation(fields: [bookId], references: [id])
  bookId String       @unique
  likes  ReviewLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewLike {
  id     String  @id @default(cuid())
  isLike Boolean

  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Annotation {
  id      String @id @default(cuid())
  title   String
  chapter String
  content String

  book   Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReadRegistry {
  id        String @id @default(cuid())
  pagesRead Int

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime?
  isPinned      Boolean   @default(false)

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
}

model Achievement {
  id         String            @id @default(cuid())
  name       String
  criteria   Json
  unlockedBy UserAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id       String @id @default(cuid())
  title    String
  content  String
  keywords String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  votes    Int    @default(0)

  comments             ThreadComment[]
  userFavouriteThreads UserFavouriteThread[]
  attachments          ThreadAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavouriteThread {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  createdAt DateTime @default(now())
}

model ThreadComment {
  id       String  @id @default(cuid())
  content  String
  isEdited Boolean @default(false)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  replyToId String?
  replyTo   ThreadComment?  @relation("ThreadCommentReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   ThreadComment[] @relation("ThreadCommentReplies")

  createdAt DateTime @default(now())
}

model ThreadAttachment {
  id          String @id @default(cuid())
  description String
  image       Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId     String

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  createdAt DateTime @default(now())
}

model Image {
  id   String @id @default(cuid())
  path String

  threadAttachments ThreadAttachment[]
  books             Book[]

  createdAt DateTime @default(now())
}
